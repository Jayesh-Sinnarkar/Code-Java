Day 1
1. Go through today's sequence.txt ("day1-data\day1_help\sequence.txt")
Revise n try to answer the questions

2. Revise through : "day1-data\ready code for practice"
packages , access specifiers , methods invocation, object creation

Also go through : day1-data\ready code for practice\practice2\params_passing
to revise parameter passing in java.

3. Go through : diagrams n readmes (required for the understanding)

4. import day1.1 , in your eclipse workspace n revise
super(..)
super.toString
toString method in Object class n need of overriding
method overriding
Why System.out.println(ref) invokes ref.toString()
Run time polymorphism
upcasting



5. Hands on (OPTIONAL assignment for extra practice)

5.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

5.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

5.3 Add suitable constructors.

5.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

5.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ?
So will you add a taste() with this definition : returns "no specific taste" OR can u apply abstraction(now or may be later !)

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

5.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}


5.7 Add all of above classes under the package "com.app.fruits"
5.8 Create java application FruitBasket , with main method , as a tester , in com.app.tester package.
5.9 Prompt user for the basket size n create suitable data structure

5.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be adding a fresh fruit in the basket , in all of above options.

4. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

10. Exit 



Day 2

1. import day2.1 ,to go through EventOrganizer App
revise : upcasting , downcasting , instanceof 
(Refer to readmes : day2-data\theory\day2_help\readmes)

2. import day2.2 , to revise basics in interface , implementation class , upcasting , downcasting , run time polymorphism , classcast exception n instanceof checking
(Refer to : day2-data\theory\day2_help\interfaces_help)

3. import day2.3 n refer to : day2-data\theory\day2_help\exception handling\readme.txt
, to revise 

3.1 flow of exception handling
3.2 classes in exc handling
3.3 Error vs Exception
3.4 checked vs un checked exception
3.5 try-catch n throws keywords

4. Complete earlier pending work


5. New Hands on : OPTIONAL (time permitting!)
(refer to a diagram : stack_assignment_help.png)

 Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString


Steps
5.1  Create Customer class
eg : package com.app.core;
public class Customer
{...}


5.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
eg : 
package com.app.core;
public interface Stack 
{
  int STACK_SIZE=4;
//public abastract
  void push(Customer c);
  Customer pop();
}

5.3 Create implementation class of Stack i/f -- FixedStack (array based)

eg : package ....
public class FixedStack implements Stack 
{
 //data : private Customer[] customers , private int top;
//ctor : def ctor
//top=-1 , customers =new Customer[STACK_SIZE];

@Override
public void push(Customer c)
{
   if(top < customers.length-1) {
    customers[++top]=c;
   sop("success");
 }
   else
     sop("stack overflow ");
}

}

//pop
//top == -1 => empty stack! -- return null;
return customers[top--];




5.4 Create another implementation class of Stack i/f-- GrowableStack (array based)
Can you add inheritance between Fixed Stack n Growable Stack ???? 

5.5
Create Tester class (Hint :  use dynamic method dispatch using interfaces)
Display Menu
Note : Must use 1 switch-case only. You won't need any complex nested control structure
Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack


2 -- Choose Growable Stack


3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit

Day 3

Good news ! No new assignments today!!!

1. import day3.1 to revise
exception handling : finally , try-with-resources , custom exceptions

2. import day3.2 to revise
String n StringBuilder classes

3. I have discussed in detail the solution of Stack assignment , till FixedStack
Every one should complete at least
Customer class , Stack interface , FixedStack class


Day 4

1. import day4.1 
Refer to today's sequence
Revise code with readmes
1.1 Date time handling
1.2 Wrappers
1.3 Variable args syntax
1.4 introduction to enums


2. I have discussed in detail the complete solution of Stack assignment
Do try n complete 
Customer class , Stack interface , FixedStack class , GrowableStack class n Tester class

3. Complete pending work.

4. Optional assignment (Time permitting)
We are going to develop core banking application in upcoming days.

Requirements
4.1 Create Bank Account class(in the package - com.app.banking)  : having 
acct number(int) , customer name(string), account type (string) , account balance(double), account opening date(LocalDate)

Add constructor to accept all of above details .
Methods
1. toString for returning account summary
2.Add withdraw n deposit methods in the bank account.
3. Add Funds transfer method

4.2 Create  TestAccount class in the package (tester)
Accept 2 account details from user.
Display 
Account summary
Perform : Withdraw
Deposit
Funds Transfer



