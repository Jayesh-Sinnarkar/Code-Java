Day 1
1. Go through today's sequence.txt ("day1-data\day1_help\sequence.txt")
Revise n try to answer the questions

2. Revise through : "day1-data\ready code for practice"
packages , access specifiers , methods invocation, object creation

Also go through : day1-data\ready code for practice\practice2\params_passing
to revise parameter passing in java.

3. Go through : diagrams n readmes (required for the understanding)

4. import day1.1 , in your eclipse workspace n revise
super(..)
super.toString
toString method in Object class n need of overriding
method overriding
Why System.out.println(ref) invokes ref.toString()
Run time polymorphism
upcasting



5. Hands on (OPTIONAL assignment for extra practice)

5.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

5.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

5.3 Add suitable constructors.

5.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

5.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ?
So will you add a taste() with this definition : returns "no specific taste" OR can u apply abstraction(now or may be later !)

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

5.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}


5.7 Add all of above classes under the package "com.app.fruits"
5.8 Create java application FruitBasket , with main method , as a tester , in com.app.tester package.
5.9 Prompt user for the basket size n create suitable data structure

5.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be adding a fresh fruit in the basket , in all of above options.

4. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

10. Exit 



Day 2

1. import day2.1 ,to go through EventOrganizer App
revise : upcasting , downcasting , instanceof 
(Refer to readmes : day2-data\theory\day2_help\readmes)

2. import day2.2 , to revise basics in interface , implementation class , upcasting , downcasting , run time polymorphism , classcast exception n instanceof checking
(Refer to : day2-data\theory\day2_help\interfaces_help)

3. import day2.3 n refer to : day2-data\theory\day2_help\exception handling\readme.txt
, to revise 

3.1 flow of exception handling
3.2 classes in exc handling
3.3 Error vs Exception
3.4 checked vs un checked exception
3.5 try-catch n throws keywords

4. Complete earlier pending work


5. New Hands on : OPTIONAL (time permitting!)
(refer to a diagram : stack_assignment_help.png)

 Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString


Steps
5.1  Create Customer class
eg : package com.app.core;
public class Customer
{...}


5.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
eg : 
package com.app.core;
public interface Stack 
{
  int STACK_SIZE=4;
//public abastract
  void push(Customer c);
  Customer pop();
}

5.3 Create implementation class of Stack i/f -- FixedStack (array based)

eg : package ....
public class FixedStack implements Stack 
{
 //data : private Customer[] customers , private int top;
//ctor : def ctor
//top=-1 , customers =new Customer[STACK_SIZE];

@Override
public void push(Customer c)
{
   if(top < customers.length-1) {
    customers[++top]=c;
   sop("success");
 }
   else
     sop("stack overflow ");
}

}

//pop
//top == -1 => empty stack! -- return null;
return customers[top--];




5.4 Create another implementation class of Stack i/f-- GrowableStack (array based)
Can you add inheritance between Fixed Stack n Growable Stack ???? 

5.5
Create Tester class (Hint :  use dynamic method dispatch using interfaces)
Display Menu
Note : Must use 1 switch-case only. You won't need any complex nested control structure
Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack


2 -- Choose Growable Stack


3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit

Day 3

Good news ! No new assignments today!!!

1. import day3.1 to revise
exception handling : finally , try-with-resources , custom exceptions

2. import day3.2 to revise
String n StringBuilder classes

3. I have discussed in detail the solution of Stack assignment , till FixedStack
Every one should complete at least
Customer class , Stack interface , FixedStack class


Day 4

1. import day4.1 
Refer to today's sequence
Revise code with readmes
1.1 Date time handling
1.2 Wrappers
1.3 Variable args syntax
1.4 introduction to enums


2. I have discussed in detail the complete solution of Stack assignment
Do try n complete 
Customer class , Stack interface , FixedStack class , GrowableStack class n Tester class

3. Complete pending work.

4. Optional assignment (Time permitting)
We are going to develop core banking application in upcoming days.

Requirements
4.1 Create Bank Account class(in the package - com.app.banking)  : having 
acct number(int) , customer name(string), account type (string) , account balance(double), account opening date(LocalDate)

Add constructor to accept all of above details .
Methods
1. toString for returning account summary
2.Add withdraw n deposit methods in the bank account.
3. Add Funds transfer method

4.2 Create  TestAccount class in the package (tester)
Accept 2 account details from user.
Display 
Account summary
Perform : Withdraw
Deposit
Funds Transfer


Day 5
1. MUST solve first  , points assignment from 
"day5-data\Additional optional assignments.txt"

Do try overriding equals method , as discussed.

2. Go through today's sequence.txt
DO NOT import day5.2 first.
Try to solve showroom management on your own w/o referring to day5.2
Refre to it only if required.

3. import day5.1 , to revise
enums , inner class (non static nested class) , generics n for-each loop(how it works on the copy of array!)

4. Complete pending work.


Day 6
1. Keep Collection framework overview diagram , your notes (API : constructor n methods) n java docs open
import day6.1 
1.1 Refer to : day6.1\src\lists\TestIntegerList.java
Revise List API completely.
Add your own objectives (if any !) n test it.

1.2 Refer to : day6.1\src\lists\ShowroomManagement.java
For understanding the flow : use Ctrl Click (to open the declaration)
Trace complete flow along with the objectives.
Close the project day6.1 now n try to solve at least these 2 objectives , on your own.
1. Add new vehicle , with the validation rules
2. Apply disocunt

Everyone must complete till this part in today's labs.
Must complete by now Point2D assignment also.



2. Tomorrow's morning lab : continue with this hands on

2.1.
Modify BankAccount class.
 Bank Account class(in the package - com.app.banking)  : having 
acct number(int) , customer name(string), account type (enum : SAVING,CURRENT,FD,NRE,LOAN,NRO) , account balance(double), account opening date(LocalDate)

Can you add the min balance along with the account type ? YES !
Try it out with the enum

2.2 Banking Validation rules
1. User should not be able to add dup accounts (PK : account no)
//[a1(100),a2(30),a3(10).....] : list
public static void checkforDups(int acctNo,List<BankAccount>  acctList) throws ....
{
//acct no : 45
   if(acctList.contains(new BankAccount(acctNo)))
    throw new .....
   sop(" no dups");
}
2. min balance while creating the account or in any withdrawl : should not be < min balance 

2.3 Create a tester class TestBanking1
Create empty ArrayList of bank accounts
Options
1. Create Account
2. Display account summary of all accounts : using Iterator
Iterator<BankAccount>  itr=acctList.iterator();
while(itr.hasNext())
 sop(itr.next());

3. Exit


Day 7
No new assignments .
Complete pending work.
1. import day7.1 
Refer to today's sequence.txt 
Refer to code (ShowroomManagement.java)
Revise sorting in Java

2. import day7.2
Revise 
LinkedList
Iterators

Day 8
1. Try n complete BankAccount based assignment (Day 6 )

2.Add new options
2.1 Withdraw funds
i/p : acct no , amount

2.2 Deposit Funds 
i/p : acct no , amount

2.3 Transfer Funds
i/p : src acct no , dest acct no , amount
eg :
int srcNo=sc.nextInt();
int destNo=sc.nextInt();
double amount=sc.nextDouble();
int srcIndex=acctList.indexOf(new BankAcct(srcNo));
if(srcIndex == -1)
 throw ....
int destIndex=acctList.indexOf(new BankAcct(destNo));
if(destIndex == -1)
 throw ....
acctList.get(srcIndex).transferFunds(acctList.get(destIndex),amount);

2.4 Sort the accounts as per acct nos (Natural ordering)

2.5 Sort the accounts as per acct creation date (Custom ordering : creating a separate class)

2.4 Sort the accounts as per acct balance  (Custom ordering : creating anonymous inner class)


3. import day8.1 to revise sets
3.1 Mainly Revise Hashing algorithm 
3.2 LinkedHashSet n TreeSet

4. import day8.2 to revise
HashMap basic API : constructor , put , putIfAbsent


Day 9
1. import day9.1 project in your workspace, to revise
1.1 HashMap basics
1.2 Sorting of maps as per Natural ordering criteria of Keys

2. To revise generics advanced syntax
Solve
2.1 Shuffle the list
Test cases : ArrayList<Integer> , LinkedList<Double> , Vector<String>
Hint : Collections.shuffle

2.2 Reverse 
Test cases : ArrayList<Integer> , LinkedList<Double> , Vector<String>
Hint : Collections.reverse

2.3 Write a class GenericUtils
1. Add a static method to print any Collection of any elements
Test cases to be tested using Tester class  : ArrayList<Integer> , LinkedList<Double> ,HashSet<String>,TreeSet<Emp>

2. Refer to Emp n it's sub classes from day9.2\src\inheritance package
Add a method 
public int computeSalary() in Emp class n override it in all sub classes
In Emp : return 100
In Mgr : return 200
In SalesMgr : return 300
In Worker : return 150
In TempWorker : return 210

This part should be easy !

Next part : Add a static method , in GenericUtils class : to return sum of computed salary of List of emps in the organization.

Test cases to be tested using Tester class  : ArrayList<SalesMgr> , LinkedList<TempWorker> ,Vector<Mgr>

You should get a compiler err : if you pass
ArrayList<Integer> , LinkedList<Double> ,Vector<String>

3. Complete pending work.

Day 10
1. Refer to today's sequence.txt

2. import day10.1 to revise , as per above sequence.txt
default n static methods
lambda expression
Intro to functional streams

3. If time permits : hands on 
Start with a new project : day10_lab
Copy earlier BankAccount n other classes.
Make NECESSARY changes for solving further questions
Which changes ??????????? : Will be discussed tomorrow!
3.1 Create BankingUtils class to add a static method
To return  the bank accounts in the hash map , using put method
(use hard coded data for accounts)
3.2 Invoke this method from the tester class ,display hashmap

3.3 Sort these details as per asc order of acct nos n display it.


Day 11
1. Go through today's sequence
We have solved lot of requirements using Functional programming.
Try them out !

2. What will happen ?
If Fruit is a concrete super class n Mango is it's subclass.
Fruit f=new Fruit();
Mango m=f;
Mango m2=(Mango)f;

3. import day11.1 , refer to : day11.1\src\p2\Test8.java
Revise Map API

4. import day11.2 n revise 
Buffered text file handling.

5. Complete pending work


Day 12
1. import day12.1 , to revise 
serialization n de-serialization

2. Mandatory assignment (discussed in the theory session)

Write java app for the following. 
1. restore emp details from bin file using : de-serial => init phse/ set up phase
2. Options (servicing phase)
2.1 Add emp details
i/p : emp details
2.2 Display all emps
2.3 Retrieve by emp id
i/p : emp id
2.4 Delete emp details
i/p : emp id
2.5 display all emps from specific dept , between sal range
i/p : dept n salary range
2.6 Salary increment : 
i/p : emp id n salary increment

3. before terminating app : (shut down / destroy phase)
save emp details in bin file : using ser.

NOTE : Mandatory options are 
2.1 , 2.2 
Storing n re-storing is mandatory.

3. If time permits , go through today's sequence. We have discussed in detail , the assginment solution to find name of emp drawing max salary , from a specific dept. 
Try it !


Day 13

1. Spend at least an hour , in revising multi threading in java.
How ?
import day13.1 in your workspace. 
Go through 
1.1 package thrds1 : to check the concurrency , using extends Thread
1.2 package thrds2 : to check the concurrency , using implements Runnable
1.3  package thrds3 : to revise join n ensuring no orphan threads.
1.4  package thrds4 : to revise join ,sleep , interrupt , threads blocking on i/p

1.5 import day13.2 , in your workspace. 
to revise collection + i/o + threads

1.5 import day13.1 , in your workspace n go through JointAccount class
We will continue from this point onwards tomorrow.


2. Complete pending work.












